apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{ include "zookeeper.labels" . | indent 4 | trim}}
spec:
  selector:
    matchLabels:
      {{ include "zookeeper.selector" . | indent 6  | trim }}
  serviceName: {{ template "zookeeper.headless-service-name" . }}
  replicas: {{ .Values.size }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        {{ include "zookeeper.labels" . | indent 8  | trim }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: {{ template "zookeeper.name" . }}
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kubernetes-zookeeper
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        image: "{{ .Values.image }}"
        env:
        - name: CLIENTPORT
          value: "{{ .Values.clientPort }}"
        {{- if .Values.resources }}
        resources:
          {{ toYaml .Values.resources | indent 10 | trim }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.clientPort }}
          name: client
        - containerPort: {{ .Values.serverPort }}
          name: server
        - containerPort: {{ .Values.leadElectionPort }}
          name: leader-election
        command:
        - sh
        - -c
        - "start-zookeeper \
          --servers={{ .Values.size }} \
          --data_dir=/var/lib/zookeeper/data \
          --data_log_dir=/var/lib/zookeeper/data/log \
          --conf_dir=/opt/zookeeper/conf \
          --client_port={{ .Values.clientPort }} \
          --election_port={{ .Values.leadElectionPort }} \
          --server_port={{ .Values.serverPort }} \
          --tick_time={{ .Values.tickTime }} \
          --init_limit={{ .Values.initLimit }} \
          --sync_limit={{ .Values.syncLimit }} \
          --heap={{ .Values.heap }} \
          --max_client_cnxns={{ .Values.maxClientCnxns }} \
          --snap_retain_count={{ .Values.snapRetainCount }} \
          --purge_interval={{ .Values.purgeInterval }} \
          --max_session_timeout={{ .Values.maxSessionTimeout }} \
          --min_session_timeout={{ .Values.minSessionTimeout }} \
          --log_level={{ .Values.logLevel }}"
        {{- if .Values.readinessProbe }}
        readinessProbe:
          {{ toYaml .Values.readinessProbe | indent 10 | trim }}
        {{- end }}
        {{- if .Values.livenessProbe }}
        livenessProbe:
          {{ toYaml .Values.livenessProbe | indent 10 | trim }}
        {{- end }}
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper
      securityContext:
        runAsUser: {{ .Values.user }}
        fsGroup: {{ .Values.group }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
      labels:
        {{ include "zookeeper.labels" . | indent 8 | trim }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.storage }}